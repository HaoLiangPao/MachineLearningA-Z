distance = read_csv("./gpa.csv")
library(tidyverse)
distance = read_csv("./gpa.csv")
distance = read_csv("./gpa.csv")
setwd("~/Desktop/机器学习Udemy/Machine Learning A-Z Chinese Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
source('~/.active-rstudio-document', echo=TRUE)
#Data Processing
#Importing DataSet
dataset = read.csv("Salary_Data.csv")
#splitting the dataset into training set and testing set
install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Purchased, 0.8)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
install.packages("caTools")
#Data Processing
#Importing DataSet
dataset = read.csv("Salary_Data.csv")
#splitting the dataset into training set and testing set
#install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Purchased, 0.8)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Data Processing
#Importing DataSet
dataset = read.csv("Salary_Data.csv")
#splitting the dataset into training set and testing set
#install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset, 2/3)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Data Processing
#Importing DataSet
dataset = read.csv("Salary_Data.csv")
#splitting the dataset into training set and testing set
#install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Salary, 2/3)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Fitting the simple linear regression to the training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
View(regressor)
summary(regressor)
Y_pred = predict(regressor, newdata = testing_set)
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_tile("Salary vs Experience (Training Set)") +
xlab("Years of Experience") +
ylab("Salary")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_tile("Salary vs Experience (Training Set)") +
xlab("Years of Experience") +
ylab("Salary")
#Data Processing
#Importing DataSet
dataset = read.csv("Salary_Data.csv")
#splitting the dataset into training set and testing set
#install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Salary, 2/3)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Fitting the simple linear regression to the training set
#P < 0.05 -> a relatively good model
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
Y_pred = predict(regressor, newdata = testing_set)
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_tile("Salary vs Experience (Training Set)") +
xlab("Years of Experience") +
ylab("Salary")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtile("Salary vs Experience (Training Set)") +
xlab("Years of Experience") +
ylab("Salary")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle("Salary vs Experience (Training Set)") +
xlab("Years of Experience") +
ylab("Salary")
ggplot() +
geom_point(aes(x = testing_set$YearsExperience, y = testing_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle("Salary vs Experience (Testing Set)") +
xlab("Years of Experience") +
ylab("Salary")
