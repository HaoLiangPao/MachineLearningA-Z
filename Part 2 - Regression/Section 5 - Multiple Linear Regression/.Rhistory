distance = read_csv("./gpa.csv")
library(tidyverse)
distance = read_csv("./gpa.csv")
distance = read_csv("./gpa.csv")
setwd("~/Desktop/机器学习Udemy/Machine Learning A-Z Chinese Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
#Importing DataSet
dataset = read.csv("50_Startups.csv")
View(dataset)
#Take care of missing data
tryout = dataset$Age
tryout1 = dataset$Age[is.na(dataset$Age)]
dataset$Age[is.na(dataset$Age)] = mean(dataset$Age, na.rm = T)
dataset$Salary[is.na(dataset$Salary)] = mean(dataset$Salary, na.rm = T)
#Take care of missing data
tryout = dataset$Age
tryout1 = dataset$Age[is.na(dataset$Age)]
dataset$State[is.na(dataset$Age)] = mean(dataset$Age, na.rm = T)
dataset$Profit[is.na(dataset$Salary)] = mean(dataset$Salary, na.rm = T)
#Data Processing
#Importing DataSet
dataset = read.csv("50_Startups.csv")
#Data Processing
#Importing DataSet
dataset = read.csv("50_Startups.csv")
#transform categorical data
dataset$State = factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1,2,3))
#splitting the dataset into training set and testing set
install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Profit, 0.8)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Profit, 0.8)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(testing_set)
View(training_set)
#Data Processing
#Importing DataSet
dataset = read.csv("Data.csv")
#Take care of missing data
tryout = dataset$Age
tryout1 = dataset$Age[is.na(dataset$Age)]
dataset$Age[is.na(dataset$Age)] = mean(dataset$Age, na.rm = T)
dataset$Salary[is.na(dataset$Salary)] = mean(dataset$Salary, na.rm = T)
#transform categorical data
dataset$Country = factor(dataset$Country,
levels = c("France", "Germany", "Spain"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("Yes", "No"),
labels = c(0,1))
#splitting the dataset into training set and testing set
install.packages('caTools')
library(caTools)
#generate random number
set.seed(123)
#create split pattern based on random number generated
split = sample.split(dataset$Purchased, 0.8)
#subset the source dataset into actual training set and testing set
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Feature Scaling - 不能对factor进行scaling，目前只能对数字进行scaling
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
install.packages("caTools")
View(testing_set)
#Data Processing
#Importing DataSet
dataset = read.csv("Data.csv")
#Take care of missing data
tryout = dataset$Age
tryout1 = dataset$Age[is.na(dataset$Age)]
dataset$Age[is.na(dataset$Age)] = mean(dataset$Age, na.rm = T)
dataset$Salary[is.na(dataset$Salary)] = mean(dataset$Salary, na.rm = T)
#transform categorical data
dataset$Country = factor(dataset$Country,
levels = c("France", "Germany", "Spain"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("Yes", "No"),
labels = c(0,1))
#Data Processing
#Importing DataSet
dataset = read.csv("Data.csv")
View(dataset)
#Fitting Multiple Linear Regression to the Trainning Set
regressor = lm(formula = Profit ~ .,
data = training_set)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
#Fitting Multiple Linear Regression to the Trainning Set
regressor = lm(formula = Profit ~ R.D.Spend, Administration, Marketing.Spend, State,
data = training_set)
View(regressor)
View(dataset)
#Fitting Multiple Linear Regression to the Trainning Set
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
summary(regressor)
#Fitting Multiple Linear Regression to the Trainning Set
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
Y_pred = predict(regressor, newdata = testing_set)
Y_pred2 = predict(regressor, newdata = training_set)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regressor)
