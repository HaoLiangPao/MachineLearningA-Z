distance = read_csv("./gpa.csv")
library(tidyverse)
distance = read_csv("./gpa.csv")
distance = read_csv("./gpa.csv")
setwd("~/Desktop/机器学习Udemy/Machine Learning A-Z Chinese Template Folder/Part 6 - Reinforcement Learning/Section 25 - Upper Confidence Bound (UCB)")
# Random Selection
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
numbers_of_selections = list(0)
sums_of_selections = list(0)
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer()
total_reward = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
max_UCB = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
ads_selected.append(best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
total_reward = total_reward + reward
}
}
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer()
total_reward = 0
upper_bound = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
max_UCB = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
ads_selected.append(best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
total_reward = total_reward + reward
}
}
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer()
total_reward = 0
upper_bound = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
max_UCB = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
total_reward = total_reward + reward
}
}
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer()
total_reward = 0
upper_bound = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
max_UCB = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
total_reward = total_reward + reward
}
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer()
total_reward = 0
upper_bound = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
max_UCB = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
sums_of_selections[best_ad] = sums_of_selections[best_ad] + reward
total_reward = total_reward + reward
}
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer(0)
total_reward = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
upper_bound = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
sums_of_selections[best_ad] = sums_of_selections[best_ad] + reward
total_reward = total_reward + reward
}
# Upper Confidence Bound
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing UCB
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_selections = integer(d)
sums_of_rewards = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_upper_bound = 0
for (i in 1:d) {
if (numbers_of_selections[i] > 0) {
average_reward = sums_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_selections = integer(d)
sums_of_rewards = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_upper_bound = 0
for (i in 1:d) {
if (numbers_of_selections[i] > 0) {
average_reward = sums_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer(0)
total_reward = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections)
upper_bound = average_reward + delta_ad
}
else{
upper_bound = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
sums_of_selections[best_ad] = sums_of_selections[best_ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer(0)
total_reward = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections[ad])
upper_bound = average_reward + delta_ad
}
else{
upper_bound = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
sums_of_selections[best_ad] = sums_of_selections[best_ad] + reward
total_reward = total_reward + reward
}
# UCB
# Importing the DataSet
dataset = read.csv("Ads_CTR_Optimisation.csv")
# Appling UCB
N = 10000
d = 10
numbers_of_selections = integer(d)
sums_of_selections = integer(d)
ads_selected = integer(0)
total_reward = 0
for (Round in 1:N) {
max_UCB = 0
best_ad = 0
for (ad in 1:d) {
if (numbers_of_selections[ad] > 0){
average_reward = sums_of_selections[ad] / numbers_of_selections[ad]
delta_ad = sqrt(3/2 * log(Round) / numbers_of_selections[ad])
upper_bound = average_reward + delta_ad
}
else{
upper_bound = 1e400
}
if (upper_bound > max_UCB){
max_UCB = upper_bound
best_ad = ad
}
}
ads_selected = append(ads_selected, best_ad)
numbers_of_selections[best_ad] = numbers_of_selections[best_ad] + 1
reward = dataset[Round,best_ad]
sums_of_selections[best_ad] = sums_of_selections[best_ad] + reward
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
